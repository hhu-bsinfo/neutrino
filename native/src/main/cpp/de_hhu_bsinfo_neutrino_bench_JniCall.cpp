/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <neutrino/NativeCall.hpp>
#include <cstdint>

/* Header for class de_hhu_bsinfo_neutrino_bench_JniCall */

#ifndef _Included_de_hhu_bsinfo_neutrino_bench_JniCall
#define _Included_de_hhu_bsinfo_neutrino_bench_JniCall
#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jobject JNICALL Java_de_hhu_bsinfo_neutrino_bench_JniCall_addComplex (JNIEnv *env, jclass clazz, jobject a, jobject b) {

}


JNIEXPORT jobject JNICALL Java_de_hhu_bsinfo_neutrino_bench_JniCall_addNativeComplex__JJ (JNIEnv *env, jclass clazz, jlong a, jlong b) {

}


JNIEXPORT void JNICALL Java_de_hhu_bsinfo_neutrino_bench_JniCall_addNativeComplex__JJJ (JNIEnv *env, jclass clazz, jlong a, jlong b, jlong result) {

}

// Checksum

uint8_t checksum(const uint8_t *buff, size_t len) {
    unsigned int sum;

    for ( sum = 0 ; len != 0 ; len-- ) {
        sum += *(buff++);
    }

    return (uint8_t) sum;
}


JNIEXPORT jbyte JNICALL Java_de_hhu_bsinfo_neutrino_bench_JniCall_checkSumByteArrayGet (JNIEnv *env, jclass clazz, jbyteArray bytes) {
    auto length = env->GetArrayLength(bytes);
    auto elements = env->GetByteArrayElements(bytes, nullptr);
    auto result = checksum(reinterpret_cast<const uint8_t *>(elements), length);
    env->ReleaseByteArrayElements(bytes, elements, 0);
    return result;
}


JNIEXPORT jbyte JNICALL Java_de_hhu_bsinfo_neutrino_bench_JniCall_checkSumByteArrayGetCritical (JNIEnv *env, jclass clazz, jbyteArray bytes) {
    auto length = env->GetArrayLength(bytes);
    auto elements = env->GetPrimitiveArrayCritical(bytes, nullptr);
    auto result = checksum(reinterpret_cast<const uint8_t *>(elements), length);
    env->ReleasePrimitiveArrayCritical(bytes, elements, 0);
    return result;
}


JNIEXPORT jbyte JNICALL Java_de_hhu_bsinfo_neutrino_bench_JniCall_checkSumByteArrayJavaCritical (JNIEnv *env, jclass clazz, jbyteArray bytes) {
    auto exceptinoClass = env->FindClass("java/lang/Exception");
    env->ThrowNew(exceptinoClass, "Should not be reached");
    return -1;
}

JNIEXPORT jbyte JNICALL JavaCritical_de_hhu_bsinfo_neutrino_bench_JniCall_checkSumByteArrayJavaCritical (jint length, jbyte* bytes) {
    return checksum(reinterpret_cast<const uint8_t *>(bytes), length);
}


JNIEXPORT jbyte JNICALL Java_de_hhu_bsinfo_neutrino_bench_JniCall_checkSumDirectByteBuffer (JNIEnv *env, jclass clazz, jobject buffer) {
    auto length = env->GetDirectBufferCapacity(buffer);
    auto elements = env->GetDirectBufferAddress(buffer);
    return checksum(reinterpret_cast<const uint8_t *>(elements), length);
}


JNIEXPORT jbyte JNICALL Java_de_hhu_bsinfo_neutrino_bench_JniCall_checkSumHeapByteBuffer (JNIEnv *env, jclass clazz, jobject buffer) {
    return 0;
}


JNIEXPORT jbyte JNICALL Java_de_hhu_bsinfo_neutrino_bench_JniCall_checkSumLocalBuffer (JNIEnv *env, jclass clazz, jlong handle, jlong capacity) {
    return checksum(reinterpret_cast<const uint8_t *>(handle), capacity);
}



#ifdef __cplusplus
}
#endif
#endif
