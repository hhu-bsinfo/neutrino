package de.hhu.bsinfo.neutrino.api.device;

import de.hhu.bsinfo.neutrino.api.util.RegisteredBuffer;
import de.hhu.bsinfo.neutrino.util.MemoryAlignment;
import de.hhu.bsinfo.neutrino.verbs.*;
import org.jetbrains.annotations.Nullable;

import java.io.IOException;

public interface InfinibandDevice {

    /**
     * The {@link PortAttributes} belonging to the current infiniband device.
     */
    PortAttributes getPortAttributes();

    /**
     * The {@link DeviceAttributes} belonging to this device.
     */
    DeviceAttributes getDeviceAttributes();

    /**
     * Creates a new {@link RegisteredBuffer} used for RDMA operations.
     */
    RegisteredBuffer allocateMemory(int capacity) throws IOException;

    /**
     * Creates a new {@link RegisteredBuffer} used for RDMA operations.
     */
    RegisteredBuffer allocateMemory(int capacity, MemoryAlignment alignment) throws IOException;

    /**
     * Wraps the specified chunk of memory within a {@link MemoryRegion}.
     */
    MemoryRegion wrapRegion(long handle, long capacity, AccessFlag... accessFlags) throws IOException;

    /**
     * Creates a new {@link QueuePair} using the provided {@link QueuePair.InitialAttributes}.
     */
    QueuePair createQueuePair(QueuePair.InitialAttributes initialAttributes) throws IOException;

    /**
     * Creates a new {@link SharedReceiveQueue} using the provided {@link SharedReceiveQueue.InitialAttributes}.
     */
    SharedReceiveQueue createSharedReceiveQueue(SharedReceiveQueue.InitialAttributes initialAttributes) throws IOException;

    /**
     * Creates a new {@link CompletionQueue} with the specified maximum capacity.
     */
    CompletionQueue createCompletionQueue(int capacity, @Nullable CompletionChannel channel) throws IOException;

    /**
     * Creates a new {@link CompletionChannel}.
     */
    CompletionChannel createCompletionChannel() throws IOException;

    /**
     * The next async event generated by the RDMA device.
     * The {@link AsyncEvent} needs to be acknowledged and released.
     */
    AsyncEvent getAsyncEvent() throws IOException;

    /**
     * The protection domain used by this Infiniband device.
     */
    ProtectionDomain getProtectionDomain();

    /**
     * Creates a new thread domain.
     */
    ThreadDomain createThreadDomain(ThreadDomain.InitialAttributes attributes) throws IOException;
}
