package de.hhu.bsinfo.neutrino.api.device;

import de.hhu.bsinfo.neutrino.api.util.Buffer;
import de.hhu.bsinfo.neutrino.buffer.RegisteredBuffer;
import de.hhu.bsinfo.neutrino.verbs.AccessFlag;
import de.hhu.bsinfo.neutrino.verbs.AsyncEvent;
import de.hhu.bsinfo.neutrino.verbs.CompletionChannel;
import de.hhu.bsinfo.neutrino.verbs.CompletionQueue;
import de.hhu.bsinfo.neutrino.verbs.DeviceAttributes;
import de.hhu.bsinfo.neutrino.verbs.MemoryRegion;
import de.hhu.bsinfo.neutrino.verbs.PortAttributes;
import de.hhu.bsinfo.neutrino.verbs.QueuePair;
import de.hhu.bsinfo.neutrino.verbs.SharedReceiveQueue;
import org.jetbrains.annotations.Nullable;

public interface InfinibandDevice {

    /**
     * The {@link PortAttributes} belonging to the current infiniband device.
     */
    PortAttributes getPortAttributes();

    /**
     * The {@link DeviceAttributes} belonging to this device.
     */
    DeviceAttributes getDeviceAttributes();

    /**
     * Creates a new {@link RegisteredBuffer} used for RDMA operations.
     */
    Buffer allocateMemory(int capacity);

    /**
     * Wraps the specified chunk of memory within a {@link MemoryRegion}.
     */
    MemoryRegion wrapRegion(long handle, long capacity, AccessFlag... accessFlags);

    /**
     * Creates a new {@link QueuePair} using the provided {@link QueuePair.InitialAttributes}.
     */
    QueuePair createQueuePair(QueuePair.InitialAttributes initialAttributes);

    /**
     * Creates a new {@link SharedReceiveQueue} using the provided {@link SharedReceiveQueue.InitialAttributes}.
     */
    SharedReceiveQueue createSharedReceiveQueue(SharedReceiveQueue.InitialAttributes initialAttributes);

    /**
     * Creates a new {@link CompletionQueue} with the specified maximum capacity.
     */
    CompletionQueue createCompletionQueue(int capacity, @Nullable CompletionChannel channel);

    /**
     * Creates a new {@link CompletionChannel}.
     */
    CompletionChannel createCompletionChannel();

    /**
     * The next async event generated by the RDMA device.
     * The {@link AsyncEvent} needs to be acknowledged and released.
     */
    AsyncEvent getAsyncEvent();
}
